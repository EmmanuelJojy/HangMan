import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

/**
 * {@code Access} class provides the authentication page and all associated
 * utilities for the same. It is highly dependent on the {@code Register} and
 * {@code Login} classes. The class provides for a pluggable panel {@code p}.
 * 
 * <p>
 * Copyright (c) 2021. All rights reserved to Emmanuel Jojy. Use is subject to
 * the above conditions.
 * </p>
 * 
 * @author Emmanuel Jojy
 * 
 */
public class Access {

	/**
	 * Pluggable panel which is plugged in to the frame generated by the {@code GUI}
	 * class.
	 */
	JPanel p;

	/**
	 * An instance of the {@code Register} class.
	 */
	JPanel register;

	/**
	 * An instance of the {@code Login} class. It is provided a {@code static}
	 * modifier for purpose of being accessed by the {@code Register} class.
	 */
	static Login login;

	/**
	 * Displays status message. Default message is
	 * '{@code HangMan's Authentication Service}'.<br>
	 * Inspired by the CS50's authentication service page.
	 * 
	 * <p>
	 * Changes itself when a new user generates a credential
	 * </p>
	 */
	static JLabel status;

	/**
	 * Default constrctor provided for {@code Access} class. Initializes the
	 * pluggable JPanel p, creates instances of {@code Login} and {@code Register}.
	 * 
	 * To be invoked only from {@code GUI} class.
	 */
	public Access() {
		p = new JPanel();
		p.setLayout(null);

		JLabel title = new JLabel("Authentication", JLabel.CENTER);
		title.setFont(new Font("Calibri", Font.PLAIN, 38));
		title.setBounds(533, 20, 300, 35);
		p.add(title);

		JPanel min = new JPanel();
		min.setLayout(null);

		register = new Register().p;
		min.add(register);

		login = new Login();
		min.add(login.p);

		status = new JLabel("Hangman's Authentication Service");
		status.setBounds(20, 550, 450, 50);
		status.setFont(new Font("Consolas", Font.PLAIN, 14));
		min.add(status);

		min.setBounds(0, 45, 1366, 720);
		p.add(min);

	}
}

/**
 * {@code Register} class provides the registration panel and all associated
 * utilities for the same. The class provides for a pluggable panel {@code p}
 * for purpose of plugging into {@code Access.p}.
 * 
 * <p>
 * Requires {@code ActionListener} for purpose of incorporating a button.
 * </p>
 * 
 * <p>
 * Copyright (c) 2021. All rights reserved to Emmanuel Jojy. Use is subject to
 * the above conditions.
 * </p>
 * 
 * @author Emmanuel Jojy
 * 
 */
class Register implements ActionListener {

	/**
	 * Pluggable {@code JPanel}. Plug dimension 300 X 460.
	 */
	JPanel p;
	private JLabel head, l1, l2, l2_re, error;
	private JTextField name;
	private JPasswordField pass, pass_re;
	private JButton b;

	/**
	 * Iniatializes plug {@code p} and other relevant fields.
	 */
	public Register() {

		p = new JPanel();
		p.setLayout(null);
		p.setBounds(301 - 40, 60, 300, 460);
		p.setBorder(BorderFactory.createLineBorder(Color.black));

		head = new JLabel("New Users");
		head.setFont(new Font("Calibri", Font.BOLD, 32));
		head.setBounds(15, 5, 300, 45);

		l1 = new JLabel("User Name");
		l1.setFont(new Font("Calibri", Font.PLAIN, 28));
		l1.setBounds(15, 65, 200, 50);
		name = new JTextField(15);
		name.setBounds(15, 115, 250, 35);

		l2 = new JLabel("Password");
		l2.setFont(new Font("Calibri", Font.PLAIN, 28));
		l2.setBounds(15, 160, 200, 50);
		pass = new JPasswordField(15);
		pass.setBounds(15, 215, 250, 35);

		l2_re = new JLabel("Re-enter Password");
		l2_re.setFont(new Font("Calibri", Font.PLAIN, 28));
		l2_re.setBounds(15, 260, 300, 50);
		pass_re = new JPasswordField(15);
		pass_re.setBounds(15, 315, 250, 35);

		b = new JButton("REGISTER");
		b.setFont(new Font("Calibri", Font.PLAIN, 26));
		b.setBounds(15, 380, 140, 35);
		b.addActionListener(this);

		error = new JLabel("", JLabel.CENTER);
		error.setFont(new Font("Consolas", Font.PLAIN, 18));
		error.setBounds(15, 415, 280, 50);
		error.setForeground(Color.RED);

		p.add(head);
		p.add(l1);
		p.add(name);
		p.add(l2);
		p.add(pass);
		p.add(l2_re);
		p.add(pass_re);
		p.add(b);
		p.add(error);
	}

	/**
	 * Overriden method of {@code ActionListener}. Refer original documentation of
	 * the same for more details.
	 */
	@Override
	public void actionPerformed(ActionEvent ev) {
		Statement st = Main.st;
		ResultSet res;
		String nam, pas, par, query;
		nam = name.getText().toUpperCase();
		pas = new String(pass.getPassword());
		par = new String(pass_re.getPassword());
		if (nam.equals("") || pas.equals("") || par.equals("")) {
			showError("FIELDS CANNOT BE EMPTY");
			return;
		}
		if (!par.equals(pas)) {
			showError("PASSWORDS DO NOT MATCH");
			return;
		}

		try {
			query = "SELECT * FROM users WHERE NAME = '" + nam + "';";
			res = st.executeQuery(query);
			if (res.next()) {
				showError("USER NAME NOT AVAILABLE");
				return;
			}
			query = "INSERT INTO users(NAME, PASS) VALUES('" + nam + "', '" + pas + "');";
			st.executeUpdate(query);
		} catch (SQLException e) {
			System.out.println("#DB Error - " + e);
			System.exit(0);
		}

		p.setVisible(false);
		Access.login.error.setText("#$@ Login with Creadential");
		Access.login.p.setBorder(BorderFactory.createLineBorder(Color.GREEN, 3));
		Access.status.setText("Registration Successful. User ID generated: " + nam);
		Access.login.p.setBounds(683 - 150, 60, 300, 350);
	}

	private void showError(String msg) {
		error.setText("#$! " + msg);
		p.setBorder(BorderFactory.createLineBorder(Color.RED, 5));
	}
}

/**
 * {@code Login} class provides the login panel and all associated utilities for
 * the same. The class provides for a pluggable panel {@code p} for purpose of
 * plugging into {@code Access.p}.
 * 
 * <p>
 * Requires {@code ActionListener} for purpose of incorporating a button.
 * </p>
 * 
 * <p>
 * Copyright (c) 2021. All rights reserved to Emmanuel Jojy. Use is subject to
 * the above conditions.
 * </p>
 * 
 * @author Emmanuel Jojy
 * 
 */
class Login implements ActionListener {

	/**
	 * Pluggable {@code JPanel}. Plug dimension 300 X 350.
	 */
	JPanel p;

	/**
	 * Provides for a error meesage or current status. For use internally only.
	 */
	JLabel error;

	private JLabel head, l1, l2;
	private JTextField name;
	private JPasswordField pass;
	private JButton b;

	/**
	 * Iniatializes plug {@code p} and other relevant fields.
	 */
	public Login() {
		p = new JPanel();
		p.setLayout(null);
		p.setBounds(864 - 40, 60, 300, 350);
		p.setBorder(BorderFactory.createLineBorder(Color.black));

		head = new JLabel("Sign-in");
		head.setFont(new Font("Calibri", Font.BOLD, 32));
		head.setBounds(15, 5, 300, 45);

		l1 = new JLabel("User Name");
		l1.setFont(new Font("Calibri", Font.PLAIN, 28));
		l1.setBounds(15, 65, 200, 50);
		name = new JTextField(15);
		name.setBounds(15, 115, 250, 35);

		l2 = new JLabel("Password");
		l2.setFont(new Font("Calibri", Font.PLAIN, 28));
		l2.setBounds(15, 160, 200, 50);
		pass = new JPasswordField(15);
		pass.setBounds(15, 225, 250, 35);

		b = new JButton("LOGIN");
		b.setFont(new Font("Calibri", Font.PLAIN, 26));
		b.setBounds(15, 280, 120, 35);
		b.addActionListener(this);

		error = new JLabel("");
		error.setFont(new Font("Consolas", Font.PLAIN, 18));
		error.setBounds(15, 315, 280, 50);
		error.setForeground(Color.GREEN);

		p.add(head);
		p.add(l1);
		p.add(name);
		p.add(l2);
		p.add(pass);
		p.add(b);
		p.add(error);
	}

	/**
	 * Overriden method of {@code ActionListener}. Refer original documentation of
	 * the same for more details.
	 */
	@Override
	public void actionPerformed(ActionEvent ev) {
		Statement st = Main.st;
		ResultSet res;
		String nam, pas, dpass, query;
		nam = name.getText().toUpperCase();
		pas = new String(pass.getPassword());
		if (nam.equals("") || pas.equals("")) {
			showError("FIELDS CANNOT BE EMPTY");
			return;
		}
		try {
			query = "SELECT * FROM users WHERE NAME = '" + nam + "';";
			res = st.executeQuery(query);
			if (!res.next()) {
				showError("USER NOT REGISTERED");
				return;
			}
			dpass = res.getString("PASS");
			if (!dpass.equals(pas)) {
				showError("INCORRECT CREDENTIALS");
				return;
			} else {
				System.out.println("\n[Login as @" + nam + "]");
				GUI.name = nam;
				GUI.dashboard();
			}
		} catch (SQLException e) {
			System.out.println("#DB Error - " + e);
			System.exit(0);
		}

	}

	private void showError(String msg) {
		error.setText("#$! " + msg);
		error.setForeground(Color.RED);
		p.setBorder(BorderFactory.createLineBorder(Color.RED, 5));
	}
}
