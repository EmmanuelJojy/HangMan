import javax.swing.*;
import java.awt.*;

/**
 * 
 * The {@code GUI} class generates a frame for the entire application. This is
 * the one and only frame to be used in the application.<br>
 * The frame is generated from the {@code main()} in {@code Main} class and
 * closing the same will result in the termination of the application.
 * 
 * <p>
 * Since generating and disposing a frame could be expensive, I Emmanuel Jojy
 * came up with an approach of maintaing the frame but yet providing dynamic
 * GUI. My first approach was to make use of the {@code CardLayout} of
 * {@code java.awt} package. Unfortunetly this could not provide for the desired
 * result. The main issue was the {@code contentPane} added to the
 * {@code CardLayout} needed to be changed each time there was a change in
 * current user or new game needed to be started.<br>
 * 
 * To overcome this problem, after a lot of research I decided to plug in
 * {@code JPanel} as and when required to the frame. This idea was inspired from
 * the Python Jinja framework where one would plug in Python semantics to HTML
 * code. The field plug holds the currently actice plug of the frame. Though
 * simple it may seem, it is a really powerful piece of code.
 * </p>
 * 
 * <p>
 * ps: I have used first person perspective because I really want you to
 * understand the brainstorming that I did. In case you want to congratulate me
 * don't hesitate contact me now. I will be at CSE department FISAT. I'm
 * planning to take a patent on this. Just joking.
 * </p>
 * 
 * <p>
 * Copyright (c) 2021. All rights reserved to Emmanuel Jojy. Use is subject to
 * the above conditions.
 * </p>
 * 
 * @author Emmanuel Jojy
 * 
 */

public class GUI {

	/**
	 * The only frame in the application, the Master Frame.
	 */
	private static JFrame f;

	/**
	 * The panel to be plugged in is contained in the plug. Dynamically changes
	 * itself during phases of execution.
	 */
	private static JPanel plug;

	/**
	 * Stores the unique username of the currently active user. It gets
	 * iniaitialized only after the login page is validated.
	 * <p>
	 * All communication to the database relies to this key.
	 * </p>
	 */
	static String name;

	/**
	 * Invokation of the constructor generates a new {@code JFrame} for the
	 * application.
	 * 
	 * <p>
	 * By default the frame is set to open up in {@code MAXIMISED_BOTH} state. The
	 * size of the frame is hard code as 1366 x 720 to meet the requirements of the
	 * development phase. Sorry for any inconvinience beacuse of this.
	 * </p>
	 * 
	 * <p>
	 * It invokes the {@code login()} method and this is the very reason why login
	 * page appears first.
	 * </p>
	 */
	public GUI() {
		f = new JFrame("HangMan");
		f.setSize(1366, 720);
		f.setExtendedState(JFrame.MAXIMIZED_BOTH);
		// f.setResizable(false);
		f.setLayout(new BorderLayout());
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JLabel head = new JLabel("HangMan", JLabel.CENTER);
		head.setFont(new Font("Consolas", Font.PLAIN, 48));
		f.add(head, BorderLayout.NORTH);
		login();
		f.setVisible(true);

	}

	/**
	 * Plug disconnector for JFrame. In case of an empty plug a NullPointerException
	 * is flagged.
	 */
	private static void changePlug() {
		try {
			plug.setVisible(false);
			f.remove(plug);
		} catch (NullPointerException e) {
		}
	}

	/**
	 * Plugs the panel generated by {@code Access} class into the JFrame. The plug
	 * is hardcoded with dimension 1366 X 720, reasons as specified for constructor.
	 */
	public static void login() {
		changePlug();
		plug = new Access().p;
		plug.setBounds(0, 0, 1366, 720);
		f.add(plug, BorderLayout.CENTER);
	}

	/**
	 * Plugs the panel generated by {@code Dashboard} class into the JFrame. The
	 * plug is hardcoded with dimension 1366 X 720, reasons as specified for
	 * constructor.
	 */
	public static void dashboard() {
		changePlug();
		plug = new Dashboard().p;
		plug.setBounds(0, 0, 1366, 720);
		f.add(plug, BorderLayout.CENTER);
	}

	/**
	 * Plugs the panel generated by {@code Game} class into the JFrame. The plug is
	 * hardcoded with dimension 1366 X 720, reasons as specified for constructor.
	 */
	public static void game() {
		changePlug();
		Main.start();
		plug = new Game().p;
		plug.setBounds(0, 0, 1366, 720);
		f.add(plug, BorderLayout.CENTER);
	}
}
